// Code generated by protoc-gen-go.
// source: grpc.proto
// DO NOT EDIT!

package pb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Frame Frame
type Frame struct {
	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

// Reset Reset
func (m *Frame) Reset()         { *m = Frame{} }
func (m *Frame) String() string { return proto.CompactTextString(m) }

// ProtoMessage ProtoMessage
func (*Frame) ProtoMessage() {}

// Descriptor Descriptor
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func init() {
	proto.RegisterType((*Frame)(nil), "pb.Frame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Service service

// ServiceClient ServiceClient
type ServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

// NewServiceClient NewServiceClient
func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/pb.Service/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamClient{stream}
	return x, nil
}

// Service_StreamClient Service_StreamClient
type Service_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type serviceStreamClient struct {
	grpc.ClientStream
}

func (x *serviceStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

// ServiceServer ServiceServer
type ServiceServer interface {
	Stream(Service_StreamServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Stream(&serviceStreamServer{stream})
}

type Service_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type serviceStreamServer struct {
	grpc.ServerStream
}

func (x *serviceStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Service_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe4, 0x62, 0x75, 0x2b,
	0x4a, 0xcc, 0x4d, 0x15, 0x92, 0xe0, 0x62, 0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x71, 0x8d, 0x74, 0xb9, 0xd8, 0x83, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0x85, 0x94, 0xb8, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x85, 0x38, 0xf5, 0x0a,
	0x92, 0xf4, 0xc0, 0x3a, 0xa5, 0x10, 0x4c, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xe1, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x54, 0xe7, 0x2b, 0x6a, 0x00, 0x00, 0x00,
}
